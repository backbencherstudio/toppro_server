generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id         String    @id @default(cuid())
  expires_at DateTime?
  user_id    String
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model User {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  status      Int?      @default(1) @db.SmallInt
  approved_at DateTime?

  email      String? @unique
  username   String? @unique
  name       String? @db.VarChar(255)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  password   String? @db.VarChar(255)
  avatar     String?

  super_id     String?
  owner_id     String?
  workspace_id String? // Relation to Workspace

  workspace Workspace? @relation(fields: [workspace_id], references: [id])

  phone_number  String?
  country       String?
  state         String?
  city          String?
  address       String?
  zip_code      String?
  gender        String?
  date_of_birth DateTime? @db.Date

  billing_id String?
  type       UserType @default(USER) // SUPER ADMIN, OWNER, USER

  email_verified_at     DateTime?
  is_two_factor_enabled Int?      @default(0)
  two_factor_secret     String?

  accounts                  Account[]
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")
  roles                     Role[]         @relation("UsersOnRoles")

  user_payment_methods     UserPaymentMethod[]
  user_settings            UserSetting[]
  ucodes                   Ucode[]
  permissions              Permission[]
  role_users               RoleUser[]
  payment_transactions     PaymentTransaction[]
  services                 Service[]
  subscriptions            Subscription[]
  email_history_recipients EmailHistoryRecipient[]
  Pipeline                 Pipeline[]
  LeadStage                LeadStage[]
  DealStage                DealStage[]
  Label                    Label[]
  Source                   Source[]
  Customer                 Customer[]
  invoices                 Invoice[]
  Items                    Items[]
  leads                    Lead[]                  @relation("LeadUsers")
  owned_leads              Lead[]                  @relation("lead_owner")
  primary_user_leads       Lead[]
  owned_activities         Activity[]              @relation("activity_owner")
  actor_activities         Activity[]
  assigned_calls           Call[]                  @relation("call_assignee")
  Purchase                 Purchase[]
  Bill                     Bill[]
  roleId                   String?
  PurchaseItems            PurchaseItems[]

  @@map("users")
}

model Workspace {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  name        String
  code        String  @unique
  description String?
  super_id    String?
  owner_id    String

  status          Int?              @default(1) @db.SmallInt
  User            User[]
  Pipeline        Pipeline[]
  LeadStage       LeadStage[]
  DealStage       DealStage[]
  Label           Label[]
  Source          Source[]
  Customer        Customer[]
  Vendor          Vendor[]
  ItemCategory    ItemCategory[]
  InvoiceCategory InvoiceCategory[]
  BillCategory    BillCategory[]
  Tax             Tax[]
  Unit            Unit[]
  Items           Items[]
  Invoice         Invoice[]
  Lead            Lead[]
  Activity        Activity[]
  Purchase        Purchase[]
  Bill            Bill[]
  ItemType        ItemType[]
  AccountType     AccountType[]
  PurchaseItems   PurchaseItems[]

  @@map("workspaces")
}

enum UserType {
  SUPERADMIN
  OWNER
  USER
  CUSTOMER
  VENDOR
}

model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  token      String?
  email      String?
  expired_at DateTime?

  @@map("ucodes")
}

// Junction 

model Role {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  description String?
  status      Int?      @default(1) @db.SmallInt
  title       String?   @default("user")
  name        String?   @default("user")

  owner_id     String?
  workspace_id String?

  // A role can have many users through RoleUser
  role_users RoleUser[] // pivot
  users      User[]     @relation("UsersOnRoles") // (optional virtual, see note below)

  permission_roles PermissionRole[]
  permissions      Permission[]     @relation("PermissionToRole")
  userId           String?

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status      Int?    @default(1) @db.SmallInt
  title       String? @unique
  action      String?
  subject     String?
  conditions  String?
  fields      String?
  description String?

  owner_id     String?
  workspace_id String?
  user_id      String?

  user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole") // Many-to-many relationship with Role

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  id         String   @id @default(cuid())
  role_id    String
  user_id    String
  created_at DateTime @default(now())

  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // prevent duplicates: same user cannot be assigned the same role multiple times
  @@unique([role_id, user_id])
  @@map("role_users")
}

model Invoice {
  id            String    @id @default(cuid())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  deleted_at    DateTime?
  issued_at     DateTime?
  due_at        DateTime?
  category_id   String?
  invoice_no    String?
  itemType_id   String?
  subTotal      Float?    @default(0)
  tax_id        String?
  total         Float?    @default(0)
  paid          Float?    @default(0)
  due           Float?    @default(0)
  issued_amount Float?    @default(0)
  status        String?   @default("draft") // draft, sent, paid, overdue, cancelled
  owner_id      String?
  workspace_id  String?
  user_id       String?

  customer_id String?
  category    InvoiceCategory? @relation(fields: [category_id], references: [id])
  user        User?            @relation(fields: [user_id], references: [id])
  customer    Customer?        @relation(fields: [customer_id], references: [id])
  tax         Tax?             @relation(fields: [tax_id], references: [id])
  workspace   Workspace?       @relation(fields: [workspace_id], references: [id])

  amount   Float?
  currency String?

  items           Items[]
  itemType        ItemType?      @relation(fields: [itemType_id], references: [id])
  PurchaseItems   PurchaseItems? @relation(fields: [purchaseItemsId], references: [id])
  purchaseItemsId String?

  @@map("invoices")
}

model Items {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  invoice_id      String?
  name            String?
  sku             String?
  tax_id          String?
  itemCategory_id String?
  description     String?
  sale_price      Float?     @default(0)
  purchase_price  Float?     @default(0)
  unit_id         String?
  quantity        Int?       @default(1)
  image           String?
  vendor_id       String?
  itemType_id     String?
  discount        Float?     @default(0)
  total           Float?     @default(0)
  owner_id        String?
  workspace_id    String?
  user_id         String?
  user            User?      @relation(fields: [user_id], references: [id])
  workspace       Workspace? @relation(fields: [workspace_id], references: [id])

  unit         Unit?         @relation(fields: [unit_id], references: [id])
  tax          Tax?          @relation(fields: [tax_id], references: [id])
  itemCategory ItemCategory? @relation(fields: [itemCategory_id], references: [id])
  vendor       Vendor[]
  itemType     ItemType?     @relation(fields: [itemType_id], references: [id])
  invoice      Invoice[]

  unit_price  Float? @default(0)
  total_price Float? @default(0)

  leads           Lead[]          @relation("LeadItems")
  Purchase        Purchase[]
  AccountType     AccountType?    @relation(fields: [account_type_id], references: [id])
  account_type_id String?
  PurchaseItems   PurchaseItems[]

  @@map("items")
}

model Purchase {
  id            String    @id @default(cuid())
  created_at    DateTime  @default(now())
  updated_at    DateTime  @default(now())
  deleted_at    DateTime?
  purchase_date DateTime? // <-- use this as the "purchase date" you send from client
  status        Status?   @default(DRAFT)

  // MUST-HAVE header fields
  account_type_id String?
  vendor_id       String?
  billing_type_id String?
  category_id     String?
  purchase_no     String  @unique // <-- auto-generated like PUR0000001 (see service)

  // Multitenancy / audit
  owner_id     String?
  workspace_id String?
  user_id      String?

  // Relations (headers)
  AccountType AccountType?  @relation(fields: [account_type_id], references: [id])
  Vendor      Vendor?       @relation(fields: [vendor_id], references: [id])
  BillingType BillCategory? @relation(fields: [billing_type_id], references: [id])
  Category    ItemCategory? @relation(fields: [category_id], references: [id])
  user        User?         @relation(fields: [user_id], references: [id])
  workspace   Workspace?    @relation(fields: [workspace_id], references: [id])

  // One purchase -> many line items
  Bill          Bill[]
  Tax           Tax[]
  purchaseItems PurchaseItems[]
  Items         Items?          @relation(fields: [itemsId], references: [id])
  itemsId       String?

  @@map("purchases")
}

model PurchaseItems {
  id          String    @id @default(cuid())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  name        String?
  sku         String?
  description String?
  quantity    Int?      @default(1)
  image       String?
  discount    Float?    @default(0)
  total       Float?    @default(0)

  item Items[]

  invoice_id      String?
  tax_id          String?
  itemCategory_id String?
  sale_price      Float?  @default(0)
  purchase_price  Float?  @default(0)
  unit_id         String?
  vendor_id       String?
  itemType_id     String?
  owner_id        String?
  workspace_id    String?
  user_id         String?
  account_type_id String?
  purchase_id     String?

  user      User?      @relation(fields: [user_id], references: [id])
  workspace Workspace? @relation(fields: [workspace_id], references: [id])

  unit         Unit?         @relation(fields: [unit_id], references: [id])
  tax          Tax?          @relation(fields: [tax_id], references: [id])
  itemCategory ItemCategory? @relation(fields: [itemCategory_id], references: [id])
  vendor       Vendor[]
  itemType     ItemType?     @relation(fields: [itemType_id], references: [id])
  invoice      Invoice[]

  unit_price  Float? @default(0)
  total_price Float? @default(0)

  leads        Lead[]
  Purchase     Purchase[]
  Account_type AccountType? @relation(fields: [account_type_id], references: [id])

  @@map("Purchase_items")
}

enum Status {
  PENDING
  SENT
  DELIVERED
  READ
  DRAFT
}

// ###############################################################################################################################
//############################# Account Setup ##Start## #########################################################################
// ###############################################################################################################################
model Bill {
  id             String    @id @default(cuid())
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?
  issued_at      DateTime?
  due_at         DateTime?
  category_id    String?
  bill_no        String?
  subTotal       Float?    @default(0)
  tax_id         String?
  total          Float?    @default(0)
  paid           Float?    @default(0)
  due            Float?    @default(0)
  status         String?   @default("draft") // draft, sent, paid, overdue, cancelled
  owner_id       String?
  workspace_id   String?
  user_id        String?
  accountType_id String?

  vendor_id String?
  category  BillCategory? @relation(fields: [category_id], references: [id])
  user      User?         @relation(fields: [user_id], references: [id])
  vendor    Vendor?       @relation(fields: [vendor_id], references: [id])
  tax       Tax?          @relation(fields: [tax_id], references: [id])
  workspace Workspace?    @relation(fields: [workspace_id], references: [id])

  amount   Float?
  currency String?

  purchases   Purchase[]
  AccountType AccountType? @relation(fields: [accountType_id], references: [id])

  @@map("bills")
}

// ###############################################################################################################################
//############################# Account Setup ##End## #########################################################################
// ###############################################################################################################################

// ###############################################################################################################################
//############################# Caterogy Setup ##Start## #########################################################################
// ###############################################################################################################################

model ItemCategory {
  id    String  @id @default(cuid())
  name  String
  color String?

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  owner_id      String
  status        Int?            @default(1) @db.SmallInt
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Items         Items[]
  Purchase      Purchase[]
  PurchaseItems PurchaseItems[]
}

model InvoiceCategory {
  id      String  @id @default(cuid())
  name    String
  account String?
  color   String?

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  status       Int?      @default(1) @db.SmallInt
  owner_id     String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  Invoice   Invoice[]
}

model BillCategory {
  id      String  @id @default(cuid())
  name    String
  account String?
  color   String?

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  status       Int?      @default(1) @db.SmallInt
  owner_id     String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  Bill      Bill[]
  Purchase  Purchase[]
}

model Tax {
  id   String @id @default(cuid())
  name String
  rate Float  @default(0.0)

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  owner_id      String
  status        Int?            @default(1) @db.SmallInt
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Items         Items[]
  Invoice       Invoice[]
  Bill          Bill[]
  Purchase      Purchase[]
  PurchaseItems PurchaseItems[]
}

model Unit {
  id   String @id @default(cuid())
  name String

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  status       Int?      @default(1) @db.SmallInt
  owner_id     String

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Items         Items[]
  PurchaseItems PurchaseItems[]
}

model ItemType {
  id          String  @id @default(cuid())
  name        String
  color       String?
  description String?

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  owner_id      String
  status        Int?            @default(1) @db.SmallInt
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  items         Items[]
  Invoice       Invoice[]
  Vendor        Vendor[]
  PurchaseItems PurchaseItems[]
}

model AccountType {
  id   String @id @default(cuid())
  name String

  workspace_id String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  owner_id String

  status Int? @default(1) @db.SmallInt

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Bill          Bill[]
  Purchase      Purchase[]
  items         Items[]
  PurchaseItems PurchaseItems[]
}

// ###############################################################################################################################
// ############################# Caterogy Setup ##End## ###################################################
// ###############################################################################################################################

model NotificationEvent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  type   String?
  text   String?

  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int? @default(1) @db.SmallInt

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  notification_event_id String?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])

  entity_id String?
  read_at   DateTime?

  @@map("notifications")
}

model UserPaymentMethod {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  payment_method_id String?
  checkout_id       String?

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     String?   @default("pending")

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  subscription_id String?
  subscription    Subscription? @relation(fields: [subscription_id], references: [id])

  type         String? @default("order")
  withdraw_via String? @default("wallet")

  provider String? // stripe, paypal, etc.

  reference_number String?
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?

  @@map("payment_transactions")
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

model Message {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status MessageStatus? @default(PENDING)

  sender_id String?
  sender    User?   @relation("sender", fields: [sender_id], references: [id])

  receiver_id String?
  receiver    User?   @relation("receiver", fields: [receiver_id], references: [id])

  conversation_id String?
  conversation    Conversation? @relation(fields: [conversation_id], references: [id], onDelete: Cascade)

  attachment_id String?
  attachment    Attachment? @relation(fields: [attachment_id], references: [id])

  message String?

  @@map("messages")
}

model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name String?
  type String?

  size     Int?
  file     String?
  file_alt String?

  messages Message[]
  leads    Lead[]    @relation("LeadAttachments")

  @@map("attachments")
}

model Conversation {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  creator_id     String?
  participant_id String?

  creator     User? @relation("creator", fields: [creator_id], references: [id])
  participant User? @relation("participant", fields: [participant_id], references: [id])

  messages Message[]

  @@map("conversations")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  site_name        String?
  site_description String?
  time_zone        String
  phone_number     String?
  email            String?
  address          String?

  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  category    String?
  label       String?
  description String?

  key           String? @unique
  default_value String?

  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  setting_id String?
  setting    Setting? @relation(fields: [setting_id], references: [id])

  value String?

  @@map("user_settings")
}

// this table stores service category
model Category {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  name String? // values: Post, Videos, Email, Blogs
  slug String? @unique

  services           Service[]
  service_categories ServiceCategory[]

  @@map("categories")
}

// this table stores service category relation
model ServiceCategory {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  service_id String
  service    Service? @relation(fields: [service_id], references: [id])

  category_id String
  category    Category? @relation(fields: [category_id], references: [id])

  @@id([service_id, category_id])
  @@map("service_categories")
}

// this table stores service
model Service {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  name        String?
  description String?

  // seller id
  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  category_id String?
  category    Category? @relation(fields: [category_id], references: [id])

  service_categories ServiceCategory[]
  subscriptions      Subscription[]
  service_tiers      ServiceTier[]
  service_features   ServiceFeature[]
  addons             Addon[]

  @@map("services")
}

// this table stores features
model Feature {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  name String?

  service_features ServiceFeature[]

  @@map("features")
}

// this table stores service feature relation
model ServiceFeature {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  service_id String
  service    Service? @relation(fields: [service_id], references: [id])

  feature_id String
  feature    Feature? @relation(fields: [feature_id], references: [id])

  @@id([service_id, feature_id])
  @@map("service_features")
}

// this table stores service tier
model ServiceTier {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  name String? // "Basic", "Pro" or just Post count: "10", "15", "20"

  service_id String
  service    Service? @relation(fields: [service_id], references: [id], onDelete: Cascade)

  // price per month
  price Float?

  max_post Int?

  subscriptions Subscription[]

  @@map("service_tiers")
}

// this table stores Addon
model Addon {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  name        String? // e.g., "Instagram Story", "Carousel Post"
  description String?
  // e.g. $10 per unit per month
  price       Float?
  max_count   Int? // how many can be used in a month (optional)

  service_id String
  service    Service? @relation(fields: [service_id], references: [id], onDelete: Cascade)

  subscription_addons SubscriptionAddon[]

  @@map("addons")
}

// this table stores Channel
model Channel {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  name String? @unique // e.g., "Instagram", "Facebook", "TikTok"

  subscription_channels SubscriptionChannel[]
  post_channels         PostChannel[]

  @@map("channels")
}

// user subscription
model Subscription {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  service_tier_id String
  service_tier    ServiceTier? @relation(fields: [service_tier_id], references: [id], onDelete: Cascade)

  service_id String
  service    Service? @relation(fields: [service_id], references: [id], onDelete: Cascade)

  start_at DateTime
  end_at   DateTime

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id])

  posts_used Int? @default(0) // track usage

  payment_transactions  PaymentTransaction[]
  subscription_addons   SubscriptionAddon[]
  subscription_channels SubscriptionChannel[]

  @@map("subscriptions")
}

// this table stores Subscription and Addon relation
model SubscriptionAddon {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  subscription_id String
  subscription    Subscription? @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  addon_id String
  addon    Addon? @relation(fields: [addon_id], references: [id], onDelete: Cascade)

  quantity   Int @default(1) // number of units purchased (e.g. 5 stories)
  used_count Int @default(0)

  @@map("subscription_addons")
}

// this table stores Subscription and channel relation
model SubscriptionChannel {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  subscription_id String
  subscription    Subscription? @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  channel_id String
  channel    Channel? @relation(fields: [channel_id], references: [id], onDelete: Cascade)

  is_free Int?   @default(1) //  1 if included in base tier, 0 if paid
  price   Float? // only applies if is_free = 0

  @@map("subscription_channel")
}

// social media schedule post
model Post {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  schedule_at DateTime?

  content String? @db.Text

  hashtags String[]

  post_files        PostFile[]
  post_channels     PostChannel[]
  post_performances PostPerformance[]

  @@map("posts")
}

// this table stores schedule post channel
model PostChannel {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  post_id String
  post    Post?  @relation(fields: [post_id], references: [id], onDelete: Cascade)

  channel_id String
  channel    Channel? @relation(fields: [channel_id], references: [id], onDelete: Cascade)

  @@map("post_channels")
}

// this table stores post media
model PostFile {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  post_id String?
  post    Post?   @relation(fields: [post_id], references: [id], onDelete: Cascade)

  // metadata
  name String?
  type String? // e.g. image, video

  size      Int?
  file_path String?
  file_alt  String?

  @@map("post_files")
}

// this table stores blog
model Blog {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  title    String?
  hashtags String[]

  blog_blog_categories BlogBlogCategory[]
  blog_contents        BlogContent[]

  @@map("blogs")
}

// this table stores blog content
model BlogContent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  blog_id String?
  blog    Blog?   @relation(fields: [blog_id], references: [id], onDelete: Cascade)

  content_type String? // text, media
  content      String? @db.Text

  blog_files BlogFile[]

  @@map("blog_contents")
}

// this table stores blog category
model BlogCategory {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  name String? // values: Post, Videos, Email, Blogs
  slug String? @unique

  blog_blog_categories BlogBlogCategory[]

  @@map("blog_categories")
}

// this table stores blog and blog category
model BlogBlogCategory {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  blog_id String
  blog    Blog?  @relation(fields: [blog_id], references: [id])

  blog_category_id String
  blog_category    BlogCategory? @relation(fields: [blog_category_id], references: [id])

  @@id([blog_id, blog_category_id])
  @@map("blog_blog_categories")
}

// this table stores post media
model BlogFile {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  blog_content_id String?
  blog_content    BlogContent? @relation(fields: [blog_content_id], references: [id], onDelete: Cascade)

  // metadata
  name String?
  type String? // e.g. image, video

  size      Int?
  file_path String?
  file_alt  String?

  @@map("blog_files")
}

//admin_settings 
model WithdrawalSettings {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  minimum_withdrawal_amount   Float
  withdrawal_processing_fee   Float
  withdrawal_processing_time  String
  is_flat_commission          Boolean
  flat_commission_value       Float?
  percentage_commission_value Float?
  payment_methods             String[]

  @@map("withdrawal_settings")
}

model SecuritySettings {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  data_export_backup    Int
  session_timeout       Int
  failed_login_attempts Int
  password_expiry       Int

  @@map("security_settings")
}

// chat_bot
model ChatLog {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())

  message  String
  response String

  @@map("chat_log")
}

// this table stores Email history
model EmailHistory {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt
  sort_order Int?      @default(0)

  type    String? // Password Reset, Email Verification, etc.
  subject String?
  body    String? @db.Text

  email_history_recipients EmailHistoryRecipient[]

  @@map("email_histories")
}

// this table stores Email history recipient
model EmailHistoryRecipient {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  email_history_id String
  email_history    EmailHistory? @relation(fields: [email_history_id], references: [id], onDelete: Cascade)

  recipient_id String
  recipient    User?  @relation(fields: [recipient_id], references: [id])

  @@map("email_history_recipients")
}

// this table stores Post performance
model PostPerformance {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  post_id String
  post    Post?  @relation(fields: [post_id], references: [id], onDelete: Cascade)

  platform        String?
  likes           Int?
  comments        Int?
  shares          Int?
  reach           Int?
  impressions     Int?
  clicks          Int?
  engagement_rate Float?

  @@map("post_performances")
}

model Customer {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  contact   String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  taxNumber String?  @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  billingName    String?
  billingPhone   String?
  billingAddress String?
  billingCity    String?
  billingState   String?
  billingCountry String?
  billingZip     String?

  shippingName    String?
  shippingPhone   String?
  shippingAddress String?
  shippingCity    String?
  shippingState   String?
  shippingCountry String?
  shippingZip     String?

  owner_id     String
  workspace_id String

  // relations
  owner     User      @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  invoice   Invoice[]
}

model Vendor {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  contact   String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  taxNumber String?  @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  billingName    String?
  billingPhone   String?
  billingAddress String?
  billingCity    String?
  billingState   String?
  billingCountry String?
  billingZip     String?

  workspace_id String
  owner_id     String

  item_id String?
  item    Items?  @relation(fields: [item_id], references: [id])

  // relations
  workspace       Workspace      @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  ItemType        ItemType?      @relation(fields: [itemType_id], references: [id])
  itemType_id     String?
  Bill            Bill[]
  Purchase        Purchase[]
  PurchaseItems   PurchaseItems? @relation(fields: [purchaseItemsId], references: [id])
  purchaseItemsId String?
}

// ###############################################################################################################################
//   ############################# CRM Setup ##Start## #########################################################################
// ###############################################################################################################################

model Pipeline {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  name         String
  workspace_id String
  owner_id     String

  // relations
  workspace Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  owner     User      @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  // children
  leadStages LeadStage[]
  dealStages DealStage[]
  labels     Label[]
  leads      Lead[]

  // constraints & indexes
  @@unique([workspace_id, name])
  @@index([workspace_id, owner_id])
  @@map("pipelines")
}

model LeadStage {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  name String

  pipelineId String
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  workspace_id String
  owner_id     String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  owner        User      @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  leads Lead[]

  @@unique([pipelineId, name])
  @@index([workspace_id, owner_id])
  @@index([pipelineId])
  @@map("lead_stages")
}

model DealStage {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  name String

  pipelineId String
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  workspace_id String
  owner_id     String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  owner        User      @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@unique([pipelineId, name])
  @@index([workspace_id, owner_id])
  @@index([pipelineId])
  @@map("deal_stages")
}

model Label {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  name  String
  color String

  pipelineId String
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)

  workspace_id String
  owner_id     String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  owner        User      @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@unique([pipelineId, name])
  @@index([workspace_id, owner_id])
  @@index([pipelineId])
  @@map("labels")
}

model Source {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  name String

  workspace_id String
  owner_id     String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  owner        User      @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  leads Lead[] @relation("LeadSources")

  // unique per workspace
  @@unique([workspace_id, name])
  @@index([workspace_id, owner_id])
  @@map("sources")
}

//############################# Lead CRM ###########################

enum LeadStageStatus {
  DRAFT
  SENT
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  ONGOING
  COMPLETED
}

enum CallType {
  INBOUND
  OUTBOUND
}

model Lead {
  id         String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  workspace_id String
  owner_id     String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  owner        User      @relation("lead_owner", fields: [owner_id], references: [id], onDelete: Cascade)

  subject     String
  name        String
  email       String
  phone       String
  followup_at DateTime

  stage         LeadStageStatus @default(DRAFT)
  notes         String?         @db.Text
  discussion    String?         @db.Text
  pipeline_id   String?
  pipeline      Pipeline?       @relation(fields: [pipeline_id], references: [id], onDelete: SetNull)
  pipeline_name String?

  lead_stage_id String?
  lead_stage    LeadStage? @relation(fields: [lead_stage_id], references: [id], onDelete: SetNull)

  user_id      String?
  primary_user User?   @relation(fields: [user_id], references: [id], onDelete: SetNull)
  user_name    String?

  users User[] @relation("LeadUsers")

  products Items[]      @relation("LeadItems")
  sources  Source[]     @relation("LeadSources")
  files    Attachment[] @relation("LeadAttachments")

  tasks           Task[]
  calls           Call[]
  activity        Activity[]
  emails          EmailText[]
  PurchaseItems   PurchaseItems? @relation(fields: [purchaseItemsId], references: [id])
  purchaseItemsId String?

  @@index([workspace_id, owner_id])
  @@index([pipeline_id])
  @@index([lead_stage_id])
  @@map("leads")
}

model Task {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // parent lead
  lead_id String
  lead    Lead   @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  // fields
  name     String
  date     DateTime?
  time     String?
  priority TaskPriority @default(LOW)
  status   TaskStatus   @default(ONGOING)

  @@index([lead_id])
  @@map("tasks")
}

model EmailText {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // parent lead
  lead_id String
  lead    Lead   @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  // email content
  mail_to     String
  subject     String
  description String? @db.Text

  @@index([lead_id])
  @@map("email_texts")
}

model Call {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // parent lead
  lead_id String
  lead    Lead   @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  subject     String
  call_type   CallType
  duration    String?
  assignee_id String?
  assignee    User?    @relation("call_assignee", fields: [assignee_id], references: [id], onDelete: SetNull)
  description String?
  result      String?

  @@index([lead_id])
  @@map("calls")
}

model Activity {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  workspace_id String
  owner_id     String
  workspace    Workspace @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  owner        User      @relation("activity_owner", fields: [owner_id], references: [id], onDelete: Cascade)

  lead_id String
  lead    Lead   @relation(fields: [lead_id], references: [id], onDelete: Cascade)

  type     String
  message  String
  actor_id String?
  actor    User?   @relation(fields: [actor_id], references: [id], onDelete: SetNull)
  meta     Json?

  @@index([workspace_id, owner_id])
  @@index([lead_id])
  @@map("activities")
}

// ###############################################################################################################################
//    ############################# CRM Setup ##End## #########################################################################
// ###############################################################################################################################
